
lab3_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000a38  00000acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800126  00800126  00000af2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000af2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ddd  00000000  00000000  00000bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ac  00000000  00000000  000019c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000711  00000000  00000000  00002275  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00002988  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000644  00000000  00000000  00002a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b0  00000000  00000000  000030b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00003468  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 00 02 	jmp	0x400	; 0x400 <__vector_18>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	57 02       	muls	r21, r23
  6a:	5e 02       	muls	r21, r30
  6c:	65 02       	muls	r22, r21
  6e:	6f 02       	muls	r22, r31
  70:	79 02       	muls	r23, r25
  72:	83 02       	muls	r24, r19
  74:	8d 02       	muls	r24, r29

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	e8 e3       	ldi	r30, 0x38	; 56
  8a:	fa e0       	ldi	r31, 0x0A	; 10
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a6 32       	cpi	r26, 0x26	; 38
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a6 e2       	ldi	r26, 0x26	; 38
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 33       	cpi	r26, 0x32	; 50
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  ac:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <initUART9600>:
 *  Author: njfg0
 */ 
#include "com_uart.h"
void initUART9600(void){
	//configurar pines tx y rx
	DDRD &=~(1<<DDD0);//entrada
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	8a b9       	out	0x0a, r24	; 10
	DDRD|=(1<<DDD1);//salida Tx
  ba:	8a b1       	in	r24, 0x0a	; 10
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	8a b9       	out	0x0a, r24	; 10
	
	//configurar registro A modo fast u2x0 en 1
	UCSR0A=0;
  c0:	e0 ec       	ldi	r30, 0xC0	; 192
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
	UCSR0A|=(1<<U2X0);
  c6:	80 81       	ld	r24, Z
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 83       	st	Z, r24
	
	//configurar registro B, habilotar isr rx, bits para habilitar RX y TX
	UCSR0B=0;
  cc:	e1 ec       	ldi	r30, 0xC1	; 193
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	10 82       	st	Z, r1
	UCSR0B|=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  d2:	80 81       	ld	r24, Z
  d4:	88 69       	ori	r24, 0x98	; 152
  d6:	80 83       	st	Z, r24
	
	//Configurar registro C<Frame asincrono 8 bits de datos sin pariedad, 1 bit de stop
	UCSR0C=0;
  d8:	e2 ec       	ldi	r30, 0xC2	; 194
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	10 82       	st	Z, r1
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);
  de:	80 81       	ld	r24, Z
  e0:	86 60       	ori	r24, 0x06	; 6
  e2:	80 83       	st	Z, r24
	
	//baudrate = 207 con % de error igual a 0.16% con 9600
	UBRR0=207;
  e4:	8f ec       	ldi	r24, 0xCF	; 207
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ec:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  f0:	08 95       	ret

000000f2 <writetxtUART>:
		PORTD=((PORTD&0x03)|((num_Uart<<2)&0xFC));
		PORTB=((PORTB&0xFC)|((num_Uart>>6)&0x03));
		
    }
}
void writetxtUART(char* texto){
  f2:	ac 01       	movw	r20, r24
	uint8_t i;
	for (i=0;texto[i]!='\0';i++){
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	09 c0       	rjmp	.+18     	; 0x10a <writetxtUART+0x18>
		while(!(UCSR0A&(1<<UDRE0)));//esperar hasta que el udre0 esté en 1
  f8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  fc:	95 ff       	sbrs	r25, 5
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <writetxtUART+0x6>
		UDR0=texto[i];//cuando i nulo se acaba
 100:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		flag=0;
 104:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag>
		
    }
}
void writetxtUART(char* texto){
	uint8_t i;
	for (i=0;texto[i]!='\0';i++){
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	fa 01       	movw	r30, r20
 10c:	e2 0f       	add	r30, r18
 10e:	f1 1d       	adc	r31, r1
 110:	30 81       	ld	r19, Z
 112:	31 11       	cpse	r19, r1
 114:	f1 cf       	rjmp	.-30     	; 0xf8 <writetxtUART+0x6>
		while(!(UCSR0A&(1<<UDRE0)));//esperar hasta que el udre0 esté en 1
		UDR0=texto[i];//cuando i nulo se acaba
		flag=0;
	}
}
 116:	08 95       	ret

00000118 <main>:

void refreshPort(uint8_t valor);
void writetxtUART(char* texto);

int main(void)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	ce 56       	subi	r28, 0x6E	; 110
 122:	d1 09       	sbc	r29, r1
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	f8 94       	cli
 128:	de bf       	out	0x3e, r29	; 62
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	cd bf       	out	0x3d, r28	; 61
	cli();
 12e:	f8 94       	cli
	initUART9600();
 130:	0e 94 5a 00 	call	0xb4	; 0xb4 <initUART9600>
	DDRD|=0xFC;
 134:	8a b1       	in	r24, 0x0a	; 10
 136:	8c 6f       	ori	r24, 0xFC	; 252
 138:	8a b9       	out	0x0a, r24	; 10
	DDRB|=0x03;
 13a:	84 b1       	in	r24, 0x04	; 4
 13c:	83 60       	ori	r24, 0x03	; 3
 13e:	84 b9       	out	0x04, r24	; 4
	sei();
 140:	78 94       	sei
	DDRB|=(1<<DDB0)|(1<<DDB1);
 142:	84 b1       	in	r24, 0x04	; 4
 144:	83 60       	ori	r24, 0x03	; 3
 146:	84 b9       	out	0x04, r24	; 4
	spiInit(SPI_MASTER_OSC_DIV16,SPI_DATA_ORDER_MSB,SPI_CLOCK_IDLE_LOW,SPI_CLOCK_FIRST_EDGE);
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	83 e5       	ldi	r24, 0x53	; 83
 150:	0e 94 3f 02 	call	0x47e	; 0x47e <spiInit>
	wordRX = cadena;
 154:	8e e2       	ldi	r24, 0x2E	; 46
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <wordRX+0x1>
 15c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <wordRX>
	inicio_wordRX = wordRX;
 160:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <inicio_wordRX+0x1>
 164:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <inicio_wordRX>
    /* Replace with your application code */
    while (1) 
    {
		PORTB &=~(1<<PORTB2);
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	8b 7f       	andi	r24, 0xFB	; 251
 16c:	85 b9       	out	0x05, r24	; 5
		spiWrite('0');
 16e:	80 e3       	ldi	r24, 0x30	; 48
 170:	0e 94 a4 02 	call	0x548	; 0x548 <spiWrite>
		valorpot2=spiRead();
 174:	0e 94 a9 02 	call	0x552	; 0x552 <spiRead>
 178:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <valorpot2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	84 e3       	ldi	r24, 0x34	; 52
 180:	9c e0       	ldi	r25, 0x0C	; 12
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0x6a>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x74>
 18c:	00 00       	nop
		_delay_ms(250);
		PORTB|=(1<<PORTB2);
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	84 60       	ori	r24, 0x04	; 4
 192:	85 b9       	out	0x05, r24	; 5
		
		PORTB &=~(1<<PORTB2);
 194:	85 b1       	in	r24, 0x05	; 5
 196:	8b 7f       	andi	r24, 0xFB	; 251
 198:	85 b9       	out	0x05, r24	; 5
		spiWrite('1');
 19a:	81 e3       	ldi	r24, 0x31	; 49
 19c:	0e 94 a4 02 	call	0x548	; 0x548 <spiWrite>
		valorpot1=spiRead();
 1a0:	0e 94 a9 02 	call	0x552	; 0x552 <spiRead>
 1a4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <valorpot1>
 1a8:	ef ef       	ldi	r30, 0xFF	; 255
 1aa:	f4 e3       	ldi	r31, 0x34	; 52
 1ac:	2c e0       	ldi	r18, 0x0C	; 12
 1ae:	e1 50       	subi	r30, 0x01	; 1
 1b0:	f0 40       	sbci	r31, 0x00	; 0
 1b2:	20 40       	sbci	r18, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <main+0x96>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0xa0>
 1b8:	00 00       	nop
		_delay_ms(250);
		PORTB|=(1<<PORTB2);
 1ba:	85 b1       	in	r24, 0x05	; 5
 1bc:	84 60       	ori	r24, 0x04	; 4
 1be:	85 b9       	out	0x05, r24	; 5
		
		
		float mpot1=(valorpot1*5.0)/255.0;
 1c0:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <valorpot1>
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 c2 03 	call	0x784	; 0x784 <__floatsisf>
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	40 ea       	ldi	r20, 0xA0	; 160
 1d4:	50 e4       	ldi	r21, 0x40	; 64
 1d6:	0e 94 4e 04 	call	0x89c	; 0x89c <__mulsf3>
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	4f e7       	ldi	r20, 0x7F	; 127
 1e0:	53 e4       	ldi	r21, 0x43	; 67
 1e2:	0e 94 18 03 	call	0x630	; 0x630 <__divsf3>
 1e6:	4b 01       	movw	r8, r22
 1e8:	5c 01       	movw	r10, r24
		float mpot2=(valorpot2*5.0)/255.0;
 1ea:	60 91 27 01 	lds	r22, 0x0127	; 0x800127 <valorpot2>
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 c2 03 	call	0x784	; 0x784 <__floatsisf>
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	40 ea       	ldi	r20, 0xA0	; 160
 1fe:	50 e4       	ldi	r21, 0x40	; 64
 200:	0e 94 4e 04 	call	0x89c	; 0x89c <__mulsf3>
 204:	20 e0       	ldi	r18, 0x00	; 0
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	4f e7       	ldi	r20, 0x7F	; 127
 20a:	53 e4       	ldi	r21, 0x43	; 67
 20c:	0e 94 18 03 	call	0x630	; 0x630 <__divsf3>
 210:	6b 01       	movw	r12, r22
 212:	7c 01       	movw	r14, r24
		
		int enterov1=(int)mpot1;
 214:	c5 01       	movw	r24, r10
 216:	b4 01       	movw	r22, r8
 218:	0e 94 8a 03 	call	0x714	; 0x714 <__fixsfsi>
 21c:	2b 01       	movw	r4, r22
 21e:	3c 01       	movw	r6, r24
		int decimalv1=(int)((mpot1-enterov1)*100);
 220:	07 2e       	mov	r0, r23
 222:	00 0c       	add	r0, r0
 224:	88 0b       	sbc	r24, r24
 226:	99 0b       	sbc	r25, r25
 228:	0e 94 c2 03 	call	0x784	; 0x784 <__floatsisf>
 22c:	9b 01       	movw	r18, r22
 22e:	ac 01       	movw	r20, r24
 230:	c5 01       	movw	r24, r10
 232:	b4 01       	movw	r22, r8
 234:	0e 94 ab 02 	call	0x556	; 0x556 <__subsf3>
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	48 ec       	ldi	r20, 0xC8	; 200
 23e:	52 e4       	ldi	r21, 0x42	; 66
 240:	0e 94 4e 04 	call	0x89c	; 0x89c <__mulsf3>
 244:	0e 94 8a 03 	call	0x714	; 0x714 <__fixsfsi>
 248:	8b 01       	movw	r16, r22
		
		int enterov2=(int)mpot2;
 24a:	c7 01       	movw	r24, r14
 24c:	b6 01       	movw	r22, r12
 24e:	0e 94 8a 03 	call	0x714	; 0x714 <__fixsfsi>
 252:	4b 01       	movw	r8, r22
 254:	5c 01       	movw	r10, r24
		int decimalv2=(int)((mpot2-enterov2)*100);
 256:	07 2e       	mov	r0, r23
 258:	00 0c       	add	r0, r0
 25a:	88 0b       	sbc	r24, r24
 25c:	99 0b       	sbc	r25, r25
 25e:	0e 94 c2 03 	call	0x784	; 0x784 <__floatsisf>
 262:	9b 01       	movw	r18, r22
 264:	ac 01       	movw	r20, r24
 266:	c7 01       	movw	r24, r14
 268:	b6 01       	movw	r22, r12
 26a:	0e 94 ab 02 	call	0x556	; 0x556 <__subsf3>
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	48 ec       	ldi	r20, 0xC8	; 200
 274:	52 e4       	ldi	r21, 0x42	; 66
 276:	0e 94 4e 04 	call	0x89c	; 0x89c <__mulsf3>
 27a:	0e 94 8a 03 	call	0x714	; 0x714 <__fixsfsi>
 27e:	6b 01       	movw	r12, r22
		
		char mensaje1[5];
		mensaje1[0]='0'+enterov1;
 280:	80 e3       	ldi	r24, 0x30	; 48
 282:	84 0d       	add	r24, r4
 284:	ab 96       	adiw	r28, 0x2b	; 43
 286:	8f af       	std	Y+63, r24	; 0x3f
 288:	ab 97       	sbiw	r28, 0x2b	; 43
		mensaje1[1]='.';
 28a:	0f 2e       	mov	r0, r31
 28c:	fe e2       	ldi	r31, 0x2E	; 46
 28e:	6f 2e       	mov	r6, r31
 290:	f0 2d       	mov	r31, r0
 292:	ac 96       	adiw	r28, 0x2c	; 44
 294:	6f ae       	std	Y+63, r6	; 0x3f
 296:	ac 97       	sbiw	r28, 0x2c	; 44
		mensaje1[2]='0'+(decimalv1/10);
 298:	0f 2e       	mov	r0, r31
 29a:	fa e0       	ldi	r31, 0x0A	; 10
 29c:	ef 2e       	mov	r14, r31
 29e:	f1 2c       	mov	r15, r1
 2a0:	f0 2d       	mov	r31, r0
 2a2:	c8 01       	movw	r24, r16
 2a4:	b7 01       	movw	r22, r14
 2a6:	0e 94 bb 04 	call	0x976	; 0x976 <__divmodhi4>
 2aa:	60 5d       	subi	r22, 0xD0	; 208
 2ac:	ad 96       	adiw	r28, 0x2d	; 45
 2ae:	6f af       	std	Y+63, r22	; 0x3f
 2b0:	ad 97       	sbiw	r28, 0x2d	; 45
		mensaje1[3]='0'+(decimalv1%10);
 2b2:	80 5d       	subi	r24, 0xD0	; 208
 2b4:	ae 96       	adiw	r28, 0x2e	; 46
 2b6:	8f af       	std	Y+63, r24	; 0x3f
 2b8:	ae 97       	sbiw	r28, 0x2e	; 46
		mensaje1[4]='V';
 2ba:	0f 2e       	mov	r0, r31
 2bc:	f6 e5       	ldi	r31, 0x56	; 86
 2be:	7f 2e       	mov	r7, r31
 2c0:	f0 2d       	mov	r31, r0
 2c2:	af 96       	adiw	r28, 0x2f	; 47
 2c4:	7f ae       	std	Y+63, r7	; 0x3f
 2c6:	af 97       	sbiw	r28, 0x2f	; 47
		mensaje1[5]='\0';
 2c8:	e0 96       	adiw	r28, 0x30	; 48
 2ca:	1f ae       	std	Y+63, r1	; 0x3f
 2cc:	e0 97       	sbiw	r28, 0x30	; 48
		
		char mensaje[100];
		strcpy(mensaje,"Potenciometro 1:");
 2ce:	81 e1       	ldi	r24, 0x11	; 17
 2d0:	e2 e0       	ldi	r30, 0x02	; 2
 2d2:	f1 e0       	ldi	r31, 0x01	; 1
 2d4:	8e 01       	movw	r16, r28
 2d6:	0f 5f       	subi	r16, 0xFF	; 255
 2d8:	1f 4f       	sbci	r17, 0xFF	; 255
 2da:	d8 01       	movw	r26, r16
 2dc:	01 90       	ld	r0, Z+
 2de:	0d 92       	st	X+, r0
 2e0:	8a 95       	dec	r24
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <main+0x1c4>
		strcat(mensaje,mensaje1);
 2e4:	be 01       	movw	r22, r28
 2e6:	66 59       	subi	r22, 0x96	; 150
 2e8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ea:	c8 01       	movw	r24, r16
 2ec:	0e 94 07 05 	call	0xa0e	; 0xa0e <strcat>
		
		char mensaje2[5];
		mensaje2[0]='0'+enterov2;
 2f0:	80 e3       	ldi	r24, 0x30	; 48
 2f2:	88 0d       	add	r24, r8
 2f4:	a6 96       	adiw	r28, 0x26	; 38
 2f6:	8f af       	std	Y+63, r24	; 0x3f
 2f8:	a6 97       	sbiw	r28, 0x26	; 38
		mensaje2[1]='.';
 2fa:	a7 96       	adiw	r28, 0x27	; 39
 2fc:	6f ae       	std	Y+63, r6	; 0x3f
 2fe:	a7 97       	sbiw	r28, 0x27	; 39
		mensaje2[2]='0'+(decimalv2/10);
 300:	c6 01       	movw	r24, r12
 302:	b7 01       	movw	r22, r14
 304:	0e 94 bb 04 	call	0x976	; 0x976 <__divmodhi4>
 308:	60 5d       	subi	r22, 0xD0	; 208
 30a:	a8 96       	adiw	r28, 0x28	; 40
 30c:	6f af       	std	Y+63, r22	; 0x3f
 30e:	a8 97       	sbiw	r28, 0x28	; 40
		mensaje2[3]='0'+(decimalv2%10);
 310:	80 5d       	subi	r24, 0xD0	; 208
 312:	a9 96       	adiw	r28, 0x29	; 41
 314:	8f af       	std	Y+63, r24	; 0x3f
 316:	a9 97       	sbiw	r28, 0x29	; 41
		mensaje2[4]='V';
 318:	aa 96       	adiw	r28, 0x2a	; 42
 31a:	7f ae       	std	Y+63, r7	; 0x3f
 31c:	aa 97       	sbiw	r28, 0x2a	; 42
		mensaje2[5]='\0';
 31e:	ab 96       	adiw	r28, 0x2b	; 43
 320:	1f ae       	std	Y+63, r1	; 0x3f
 322:	ab 97       	sbiw	r28, 0x2b	; 43
		
		strcat(mensaje," Potenciometro 2:");
 324:	d8 01       	movw	r26, r16
 326:	0d 90       	ld	r0, X+
 328:	00 20       	and	r0, r0
 32a:	e9 f7       	brne	.-6      	; 0x326 <main+0x20e>
 32c:	11 97       	sbiw	r26, 0x01	; 1
 32e:	82 e1       	ldi	r24, 0x12	; 18
 330:	e3 e1       	ldi	r30, 0x13	; 19
 332:	f1 e0       	ldi	r31, 0x01	; 1
 334:	01 90       	ld	r0, Z+
 336:	0d 92       	st	X+, r0
 338:	8a 95       	dec	r24
 33a:	e1 f7       	brne	.-8      	; 0x334 <main+0x21c>
		strcat(mensaje,mensaje2);
 33c:	be 01       	movw	r22, r28
 33e:	6b 59       	subi	r22, 0x9B	; 155
 340:	7f 4f       	sbci	r23, 0xFF	; 255
 342:	c8 01       	movw	r24, r16
 344:	0e 94 07 05 	call	0xa0e	; 0xa0e <strcat>
		strcat(mensaje,"\n");
 348:	f8 01       	movw	r30, r16
 34a:	01 90       	ld	r0, Z+
 34c:	00 20       	and	r0, r0
 34e:	e9 f7       	brne	.-6      	; 0x34a <main+0x232>
 350:	31 97       	sbiw	r30, 0x01	; 1
 352:	f1 82       	std	Z+1, r15	; 0x01
 354:	e0 82       	st	Z, r14
		writetxtUART(mensaje);
 356:	c8 01       	movw	r24, r16
 358:	0e 94 79 00 	call	0xf2	; 0xf2 <writetxtUART>
		
		if (leer_uart==1){
 35c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	b1 f5       	brne	.+108    	; 0x3d0 <main+0x2b8>
			num_Uart = atoi(wordRX);
 364:	00 91 29 01 	lds	r16, 0x0129	; 0x800129 <wordRX>
 368:	10 91 2a 01 	lds	r17, 0x012A	; 0x80012a <wordRX+0x1>
 36c:	c8 01       	movw	r24, r16
 36e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <atoi>
 372:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			//writetxtUART(wordRX);
			wordRX[0] = '\0';
 376:	f8 01       	movw	r30, r16
 378:	10 82       	st	Z, r1
			PORTB &=~(1<<PORTB2);
 37a:	85 b1       	in	r24, 0x05	; 5
 37c:	8b 7f       	andi	r24, 0xFB	; 251
 37e:	85 b9       	out	0x05, r24	; 5
			spiWrite('a');
 380:	81 e6       	ldi	r24, 0x61	; 97
 382:	0e 94 a4 02 	call	0x548	; 0x548 <spiWrite>
			spiRead();
 386:	0e 94 a9 02 	call	0x552	; 0x552 <spiRead>
 38a:	ff ef       	ldi	r31, 0xFF	; 255
 38c:	24 e3       	ldi	r18, 0x34	; 52
 38e:	8c e0       	ldi	r24, 0x0C	; 12
 390:	f1 50       	subi	r31, 0x01	; 1
 392:	20 40       	sbci	r18, 0x00	; 0
 394:	80 40       	sbci	r24, 0x00	; 0
 396:	e1 f7       	brne	.-8      	; 0x390 <main+0x278>
 398:	00 c0       	rjmp	.+0      	; 0x39a <main+0x282>
 39a:	00 00       	nop
			_delay_ms(250);
			PORTB|=(1<<PORTB2);
 39c:	85 b1       	in	r24, 0x05	; 5
 39e:	84 60       	ori	r24, 0x04	; 4
 3a0:	85 b9       	out	0x05, r24	; 5
			PORTB &=~(1<<PORTB2);
 3a2:	85 b1       	in	r24, 0x05	; 5
 3a4:	8b 7f       	andi	r24, 0xFB	; 251
 3a6:	85 b9       	out	0x05, r24	; 5
			spiWrite(num_Uart);
 3a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3ac:	0e 94 a4 02 	call	0x548	; 0x548 <spiWrite>
			spiRead();
 3b0:	0e 94 a9 02 	call	0x552	; 0x552 <spiRead>
 3b4:	9f ef       	ldi	r25, 0xFF	; 255
 3b6:	e4 e3       	ldi	r30, 0x34	; 52
 3b8:	fc e0       	ldi	r31, 0x0C	; 12
 3ba:	91 50       	subi	r25, 0x01	; 1
 3bc:	e0 40       	sbci	r30, 0x00	; 0
 3be:	f0 40       	sbci	r31, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <main+0x2a2>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0x2ac>
 3c4:	00 00       	nop
			_delay_ms(250);
			PORTB|=(1<<PORTB2);
 3c6:	85 b1       	in	r24, 0x05	; 5
 3c8:	84 60       	ori	r24, 0x04	; 4
 3ca:	85 b9       	out	0x05, r24	; 5
			leer_uart=0;
 3cc:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
		}
		PORTD=((PORTD&0x03)|((num_Uart<<2)&0xFC));
 3d0:	2b b1       	in	r18, 0x0b	; 11
 3d2:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3d6:	89 2f       	mov	r24, r25
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	92 2f       	mov	r25, r18
 3e4:	93 70       	andi	r25, 0x03	; 3
 3e6:	89 2b       	or	r24, r25
 3e8:	8b b9       	out	0x0b, r24	; 11
		PORTB=((PORTB&0xFC)|((num_Uart>>6)&0x03));
 3ea:	85 b1       	in	r24, 0x05	; 5
 3ec:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3f0:	92 95       	swap	r25
 3f2:	96 95       	lsr	r25
 3f4:	96 95       	lsr	r25
 3f6:	93 70       	andi	r25, 0x03	; 3
 3f8:	8c 7f       	andi	r24, 0xFC	; 252
 3fa:	89 2b       	or	r24, r25
 3fc:	85 b9       	out	0x05, r24	; 5
		
    }
 3fe:	b4 ce       	rjmp	.-664    	; 0x168 <main+0x50>

00000400 <__vector_18>:
		char car = *str;
		
	}
}*/

ISR(USART_RX_vect){
 400:	1f 92       	push	r1
 402:	0f 92       	push	r0
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	0f 92       	push	r0
 408:	11 24       	eor	r1, r1
 40a:	8f 93       	push	r24
 40c:	9f 93       	push	r25
 40e:	ef 93       	push	r30
 410:	ff 93       	push	r31
	buffRX=UDR0;
 412:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 416:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <buffRX>
	if ((buffRX == '\n')||(buffRX == '\r')) { //(buffRX==0)||
 41a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <buffRX>
 41e:	8a 30       	cpi	r24, 0x0A	; 10
 420:	21 f0       	breq	.+8      	; 0x42a <__vector_18+0x2a>
 422:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <buffRX>
 426:	8d 30       	cpi	r24, 0x0D	; 13
 428:	89 f4       	brne	.+34     	; 0x44c <__vector_18+0x4c>
		leer_uart = 1;
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
		*wordRX = '\0';
 430:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <wordRX>
 434:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <wordRX+0x1>
 438:	10 82       	st	Z, r1
		wordRX++;
		wordRX = inicio_wordRX;
 43a:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <inicio_wordRX>
 43e:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <inicio_wordRX+0x1>
 442:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <wordRX+0x1>
 446:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <wordRX>
 44a:	10 c0       	rjmp	.+32     	; 0x46c <__vector_18+0x6c>
	} else {
		*wordRX = buffRX;
 44c:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <wordRX>
 450:	f0 91 2a 01 	lds	r31, 0x012A	; 0x80012a <wordRX+0x1>
 454:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <buffRX>
 458:	80 83       	st	Z, r24
		wordRX++;
 45a:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <wordRX>
 45e:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <wordRX+0x1>
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <wordRX+0x1>
 468:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <wordRX>
	}
 46c:	ff 91       	pop	r31
 46e:	ef 91       	pop	r30
 470:	9f 91       	pop	r25
 472:	8f 91       	pop	r24
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

0000047e <spiInit>:
unsigned spiDataReady(){
	if(SPSR &(1<<SPIF))
	return 1;
	else
	return 0;
}
 47e:	e8 2f       	mov	r30, r24
 480:	84 ff       	sbrs	r24, 4
 482:	52 c0       	rjmp	.+164    	; 0x528 <spiInit+0xaa>
 484:	84 b1       	in	r24, 0x04	; 4
 486:	8c 62       	ori	r24, 0x2C	; 44
 488:	84 b9       	out	0x04, r24	; 4
 48a:	84 b1       	in	r24, 0x04	; 4
 48c:	8f 7e       	andi	r24, 0xEF	; 239
 48e:	84 b9       	out	0x04, r24	; 4
 490:	8c b5       	in	r24, 0x2c	; 44
 492:	80 61       	ori	r24, 0x10	; 16
 494:	8c bd       	out	0x2c, r24	; 44
 496:	e7 70       	andi	r30, 0x07	; 7
 498:	8e 2f       	mov	r24, r30
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	87 30       	cpi	r24, 0x07	; 7
 49e:	91 05       	cpc	r25, r1
 4a0:	08 f0       	brcs	.+2      	; 0x4a4 <spiInit+0x26>
 4a2:	4b c0       	rjmp	.+150    	; 0x53a <spiInit+0xbc>
 4a4:	fc 01       	movw	r30, r24
 4a6:	ec 5c       	subi	r30, 0xCC	; 204
 4a8:	ff 4f       	sbci	r31, 0xFF	; 255
 4aa:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__tablejump2__>
 4ae:	8c b5       	in	r24, 0x2c	; 44
 4b0:	8c 7f       	andi	r24, 0xFC	; 252
 4b2:	8c bd       	out	0x2c, r24	; 44
 4b4:	8d b5       	in	r24, 0x2d	; 45
 4b6:	81 60       	ori	r24, 0x01	; 1
 4b8:	8d bd       	out	0x2d, r24	; 45
 4ba:	3f c0       	rjmp	.+126    	; 0x53a <spiInit+0xbc>
 4bc:	8c b5       	in	r24, 0x2c	; 44
 4be:	8c 7f       	andi	r24, 0xFC	; 252
 4c0:	8c bd       	out	0x2c, r24	; 44
 4c2:	8d b5       	in	r24, 0x2d	; 45
 4c4:	8e 7f       	andi	r24, 0xFE	; 254
 4c6:	8d bd       	out	0x2d, r24	; 45
 4c8:	38 c0       	rjmp	.+112    	; 0x53a <spiInit+0xbc>
 4ca:	8c b5       	in	r24, 0x2c	; 44
 4cc:	81 60       	ori	r24, 0x01	; 1
 4ce:	8c bd       	out	0x2c, r24	; 44
 4d0:	8c b5       	in	r24, 0x2c	; 44
 4d2:	8d 7f       	andi	r24, 0xFD	; 253
 4d4:	8c bd       	out	0x2c, r24	; 44
 4d6:	8d b5       	in	r24, 0x2d	; 45
 4d8:	81 60       	ori	r24, 0x01	; 1
 4da:	8d bd       	out	0x2d, r24	; 45
 4dc:	2e c0       	rjmp	.+92     	; 0x53a <spiInit+0xbc>
 4de:	8c b5       	in	r24, 0x2c	; 44
 4e0:	81 60       	ori	r24, 0x01	; 1
 4e2:	8c bd       	out	0x2c, r24	; 44
 4e4:	8c b5       	in	r24, 0x2c	; 44
 4e6:	8d 7f       	andi	r24, 0xFD	; 253
 4e8:	8c bd       	out	0x2c, r24	; 44
 4ea:	8d b5       	in	r24, 0x2d	; 45
 4ec:	8e 7f       	andi	r24, 0xFE	; 254
 4ee:	8d bd       	out	0x2d, r24	; 45
 4f0:	24 c0       	rjmp	.+72     	; 0x53a <spiInit+0xbc>
 4f2:	8c b5       	in	r24, 0x2c	; 44
 4f4:	8e 7f       	andi	r24, 0xFE	; 254
 4f6:	8c bd       	out	0x2c, r24	; 44
 4f8:	8c b5       	in	r24, 0x2c	; 44
 4fa:	82 60       	ori	r24, 0x02	; 2
 4fc:	8c bd       	out	0x2c, r24	; 44
 4fe:	8d b5       	in	r24, 0x2d	; 45
 500:	81 60       	ori	r24, 0x01	; 1
 502:	8d bd       	out	0x2d, r24	; 45
 504:	1a c0       	rjmp	.+52     	; 0x53a <spiInit+0xbc>
 506:	8c b5       	in	r24, 0x2c	; 44
 508:	8e 7f       	andi	r24, 0xFE	; 254
 50a:	8c bd       	out	0x2c, r24	; 44
 50c:	8c b5       	in	r24, 0x2c	; 44
 50e:	82 60       	ori	r24, 0x02	; 2
 510:	8c bd       	out	0x2c, r24	; 44
 512:	8d b5       	in	r24, 0x2d	; 45
 514:	8e 7f       	andi	r24, 0xFE	; 254
 516:	8d bd       	out	0x2d, r24	; 45
 518:	10 c0       	rjmp	.+32     	; 0x53a <spiInit+0xbc>
 51a:	8c b5       	in	r24, 0x2c	; 44
 51c:	83 60       	ori	r24, 0x03	; 3
 51e:	8c bd       	out	0x2c, r24	; 44
 520:	8d b5       	in	r24, 0x2d	; 45
 522:	8e 7f       	andi	r24, 0xFE	; 254
 524:	8d bd       	out	0x2d, r24	; 45
 526:	09 c0       	rjmp	.+18     	; 0x53a <spiInit+0xbc>
 528:	84 b1       	in	r24, 0x04	; 4
 52a:	80 61       	ori	r24, 0x10	; 16
 52c:	84 b9       	out	0x04, r24	; 4
 52e:	84 b1       	in	r24, 0x04	; 4
 530:	83 7d       	andi	r24, 0xD3	; 211
 532:	84 b9       	out	0x04, r24	; 4
 534:	8c b5       	in	r24, 0x2c	; 44
 536:	8f 7e       	andi	r24, 0xEF	; 239
 538:	8c bd       	out	0x2c, r24	; 44
 53a:	8c b5       	in	r24, 0x2c	; 44
 53c:	46 2b       	or	r20, r22
 53e:	24 2b       	or	r18, r20
 540:	28 2b       	or	r18, r24
 542:	20 64       	ori	r18, 0x40	; 64
 544:	2c bd       	out	0x2c, r18	; 44
 546:	08 95       	ret

00000548 <spiWrite>:
 548:	8e bd       	out	0x2e, r24	; 46
 54a:	0d b4       	in	r0, 0x2d	; 45
 54c:	07 fe       	sbrs	r0, 7
 54e:	fd cf       	rjmp	.-6      	; 0x54a <spiWrite+0x2>
 550:	08 95       	ret

00000552 <spiRead>:

uint8_t spiRead(void){
	//while(!(SPSR&(1<<SPIF)));//ESPERA A QUE SE COMPLETE DE RECIBIR TODA LA INFO
	return(SPDR);//LEE LA INFORMACIÓN
 552:	8e b5       	in	r24, 0x2e	; 46
 554:	08 95       	ret

00000556 <__subsf3>:
 556:	50 58       	subi	r21, 0x80	; 128

00000558 <__addsf3>:
 558:	bb 27       	eor	r27, r27
 55a:	aa 27       	eor	r26, r26
 55c:	0e 94 c3 02 	call	0x586	; 0x586 <__addsf3x>
 560:	0c 94 14 04 	jmp	0x828	; 0x828 <__fp_round>
 564:	0e 94 06 04 	call	0x80c	; 0x80c <__fp_pscA>
 568:	38 f0       	brcs	.+14     	; 0x578 <__addsf3+0x20>
 56a:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_pscB>
 56e:	20 f0       	brcs	.+8      	; 0x578 <__addsf3+0x20>
 570:	39 f4       	brne	.+14     	; 0x580 <__addsf3+0x28>
 572:	9f 3f       	cpi	r25, 0xFF	; 255
 574:	19 f4       	brne	.+6      	; 0x57c <__addsf3+0x24>
 576:	26 f4       	brtc	.+8      	; 0x580 <__addsf3+0x28>
 578:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_nan>
 57c:	0e f4       	brtc	.+2      	; 0x580 <__addsf3+0x28>
 57e:	e0 95       	com	r30
 580:	e7 fb       	bst	r30, 7
 582:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_inf>

00000586 <__addsf3x>:
 586:	e9 2f       	mov	r30, r25
 588:	0e 94 25 04 	call	0x84a	; 0x84a <__fp_split3>
 58c:	58 f3       	brcs	.-42     	; 0x564 <__addsf3+0xc>
 58e:	ba 17       	cp	r27, r26
 590:	62 07       	cpc	r22, r18
 592:	73 07       	cpc	r23, r19
 594:	84 07       	cpc	r24, r20
 596:	95 07       	cpc	r25, r21
 598:	20 f0       	brcs	.+8      	; 0x5a2 <__addsf3x+0x1c>
 59a:	79 f4       	brne	.+30     	; 0x5ba <__addsf3x+0x34>
 59c:	a6 f5       	brtc	.+104    	; 0x606 <__addsf3x+0x80>
 59e:	0c 94 47 04 	jmp	0x88e	; 0x88e <__fp_zero>
 5a2:	0e f4       	brtc	.+2      	; 0x5a6 <__addsf3x+0x20>
 5a4:	e0 95       	com	r30
 5a6:	0b 2e       	mov	r0, r27
 5a8:	ba 2f       	mov	r27, r26
 5aa:	a0 2d       	mov	r26, r0
 5ac:	0b 01       	movw	r0, r22
 5ae:	b9 01       	movw	r22, r18
 5b0:	90 01       	movw	r18, r0
 5b2:	0c 01       	movw	r0, r24
 5b4:	ca 01       	movw	r24, r20
 5b6:	a0 01       	movw	r20, r0
 5b8:	11 24       	eor	r1, r1
 5ba:	ff 27       	eor	r31, r31
 5bc:	59 1b       	sub	r21, r25
 5be:	99 f0       	breq	.+38     	; 0x5e6 <__addsf3x+0x60>
 5c0:	59 3f       	cpi	r21, 0xF9	; 249
 5c2:	50 f4       	brcc	.+20     	; 0x5d8 <__addsf3x+0x52>
 5c4:	50 3e       	cpi	r21, 0xE0	; 224
 5c6:	68 f1       	brcs	.+90     	; 0x622 <__addsf3x+0x9c>
 5c8:	1a 16       	cp	r1, r26
 5ca:	f0 40       	sbci	r31, 0x00	; 0
 5cc:	a2 2f       	mov	r26, r18
 5ce:	23 2f       	mov	r18, r19
 5d0:	34 2f       	mov	r19, r20
 5d2:	44 27       	eor	r20, r20
 5d4:	58 5f       	subi	r21, 0xF8	; 248
 5d6:	f3 cf       	rjmp	.-26     	; 0x5be <__addsf3x+0x38>
 5d8:	46 95       	lsr	r20
 5da:	37 95       	ror	r19
 5dc:	27 95       	ror	r18
 5de:	a7 95       	ror	r26
 5e0:	f0 40       	sbci	r31, 0x00	; 0
 5e2:	53 95       	inc	r21
 5e4:	c9 f7       	brne	.-14     	; 0x5d8 <__addsf3x+0x52>
 5e6:	7e f4       	brtc	.+30     	; 0x606 <__addsf3x+0x80>
 5e8:	1f 16       	cp	r1, r31
 5ea:	ba 0b       	sbc	r27, r26
 5ec:	62 0b       	sbc	r22, r18
 5ee:	73 0b       	sbc	r23, r19
 5f0:	84 0b       	sbc	r24, r20
 5f2:	ba f0       	brmi	.+46     	; 0x622 <__addsf3x+0x9c>
 5f4:	91 50       	subi	r25, 0x01	; 1
 5f6:	a1 f0       	breq	.+40     	; 0x620 <__addsf3x+0x9a>
 5f8:	ff 0f       	add	r31, r31
 5fa:	bb 1f       	adc	r27, r27
 5fc:	66 1f       	adc	r22, r22
 5fe:	77 1f       	adc	r23, r23
 600:	88 1f       	adc	r24, r24
 602:	c2 f7       	brpl	.-16     	; 0x5f4 <__addsf3x+0x6e>
 604:	0e c0       	rjmp	.+28     	; 0x622 <__addsf3x+0x9c>
 606:	ba 0f       	add	r27, r26
 608:	62 1f       	adc	r22, r18
 60a:	73 1f       	adc	r23, r19
 60c:	84 1f       	adc	r24, r20
 60e:	48 f4       	brcc	.+18     	; 0x622 <__addsf3x+0x9c>
 610:	87 95       	ror	r24
 612:	77 95       	ror	r23
 614:	67 95       	ror	r22
 616:	b7 95       	ror	r27
 618:	f7 95       	ror	r31
 61a:	9e 3f       	cpi	r25, 0xFE	; 254
 61c:	08 f0       	brcs	.+2      	; 0x620 <__addsf3x+0x9a>
 61e:	b0 cf       	rjmp	.-160    	; 0x580 <__addsf3+0x28>
 620:	93 95       	inc	r25
 622:	88 0f       	add	r24, r24
 624:	08 f0       	brcs	.+2      	; 0x628 <__addsf3x+0xa2>
 626:	99 27       	eor	r25, r25
 628:	ee 0f       	add	r30, r30
 62a:	97 95       	ror	r25
 62c:	87 95       	ror	r24
 62e:	08 95       	ret

00000630 <__divsf3>:
 630:	0e 94 2c 03 	call	0x658	; 0x658 <__divsf3x>
 634:	0c 94 14 04 	jmp	0x828	; 0x828 <__fp_round>
 638:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_pscB>
 63c:	58 f0       	brcs	.+22     	; 0x654 <__divsf3+0x24>
 63e:	0e 94 06 04 	call	0x80c	; 0x80c <__fp_pscA>
 642:	40 f0       	brcs	.+16     	; 0x654 <__divsf3+0x24>
 644:	29 f4       	brne	.+10     	; 0x650 <__divsf3+0x20>
 646:	5f 3f       	cpi	r21, 0xFF	; 255
 648:	29 f0       	breq	.+10     	; 0x654 <__divsf3+0x24>
 64a:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_inf>
 64e:	51 11       	cpse	r21, r1
 650:	0c 94 48 04 	jmp	0x890	; 0x890 <__fp_szero>
 654:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_nan>

00000658 <__divsf3x>:
 658:	0e 94 25 04 	call	0x84a	; 0x84a <__fp_split3>
 65c:	68 f3       	brcs	.-38     	; 0x638 <__divsf3+0x8>

0000065e <__divsf3_pse>:
 65e:	99 23       	and	r25, r25
 660:	b1 f3       	breq	.-20     	; 0x64e <__divsf3+0x1e>
 662:	55 23       	and	r21, r21
 664:	91 f3       	breq	.-28     	; 0x64a <__divsf3+0x1a>
 666:	95 1b       	sub	r25, r21
 668:	55 0b       	sbc	r21, r21
 66a:	bb 27       	eor	r27, r27
 66c:	aa 27       	eor	r26, r26
 66e:	62 17       	cp	r22, r18
 670:	73 07       	cpc	r23, r19
 672:	84 07       	cpc	r24, r20
 674:	38 f0       	brcs	.+14     	; 0x684 <__divsf3_pse+0x26>
 676:	9f 5f       	subi	r25, 0xFF	; 255
 678:	5f 4f       	sbci	r21, 0xFF	; 255
 67a:	22 0f       	add	r18, r18
 67c:	33 1f       	adc	r19, r19
 67e:	44 1f       	adc	r20, r20
 680:	aa 1f       	adc	r26, r26
 682:	a9 f3       	breq	.-22     	; 0x66e <__divsf3_pse+0x10>
 684:	35 d0       	rcall	.+106    	; 0x6f0 <__divsf3_pse+0x92>
 686:	0e 2e       	mov	r0, r30
 688:	3a f0       	brmi	.+14     	; 0x698 <__divsf3_pse+0x3a>
 68a:	e0 e8       	ldi	r30, 0x80	; 128
 68c:	32 d0       	rcall	.+100    	; 0x6f2 <__divsf3_pse+0x94>
 68e:	91 50       	subi	r25, 0x01	; 1
 690:	50 40       	sbci	r21, 0x00	; 0
 692:	e6 95       	lsr	r30
 694:	00 1c       	adc	r0, r0
 696:	ca f7       	brpl	.-14     	; 0x68a <__divsf3_pse+0x2c>
 698:	2b d0       	rcall	.+86     	; 0x6f0 <__divsf3_pse+0x92>
 69a:	fe 2f       	mov	r31, r30
 69c:	29 d0       	rcall	.+82     	; 0x6f0 <__divsf3_pse+0x92>
 69e:	66 0f       	add	r22, r22
 6a0:	77 1f       	adc	r23, r23
 6a2:	88 1f       	adc	r24, r24
 6a4:	bb 1f       	adc	r27, r27
 6a6:	26 17       	cp	r18, r22
 6a8:	37 07       	cpc	r19, r23
 6aa:	48 07       	cpc	r20, r24
 6ac:	ab 07       	cpc	r26, r27
 6ae:	b0 e8       	ldi	r27, 0x80	; 128
 6b0:	09 f0       	breq	.+2      	; 0x6b4 <__divsf3_pse+0x56>
 6b2:	bb 0b       	sbc	r27, r27
 6b4:	80 2d       	mov	r24, r0
 6b6:	bf 01       	movw	r22, r30
 6b8:	ff 27       	eor	r31, r31
 6ba:	93 58       	subi	r25, 0x83	; 131
 6bc:	5f 4f       	sbci	r21, 0xFF	; 255
 6be:	3a f0       	brmi	.+14     	; 0x6ce <__divsf3_pse+0x70>
 6c0:	9e 3f       	cpi	r25, 0xFE	; 254
 6c2:	51 05       	cpc	r21, r1
 6c4:	78 f0       	brcs	.+30     	; 0x6e4 <__divsf3_pse+0x86>
 6c6:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_inf>
 6ca:	0c 94 48 04 	jmp	0x890	; 0x890 <__fp_szero>
 6ce:	5f 3f       	cpi	r21, 0xFF	; 255
 6d0:	e4 f3       	brlt	.-8      	; 0x6ca <__divsf3_pse+0x6c>
 6d2:	98 3e       	cpi	r25, 0xE8	; 232
 6d4:	d4 f3       	brlt	.-12     	; 0x6ca <__divsf3_pse+0x6c>
 6d6:	86 95       	lsr	r24
 6d8:	77 95       	ror	r23
 6da:	67 95       	ror	r22
 6dc:	b7 95       	ror	r27
 6de:	f7 95       	ror	r31
 6e0:	9f 5f       	subi	r25, 0xFF	; 255
 6e2:	c9 f7       	brne	.-14     	; 0x6d6 <__divsf3_pse+0x78>
 6e4:	88 0f       	add	r24, r24
 6e6:	91 1d       	adc	r25, r1
 6e8:	96 95       	lsr	r25
 6ea:	87 95       	ror	r24
 6ec:	97 f9       	bld	r25, 7
 6ee:	08 95       	ret
 6f0:	e1 e0       	ldi	r30, 0x01	; 1
 6f2:	66 0f       	add	r22, r22
 6f4:	77 1f       	adc	r23, r23
 6f6:	88 1f       	adc	r24, r24
 6f8:	bb 1f       	adc	r27, r27
 6fa:	62 17       	cp	r22, r18
 6fc:	73 07       	cpc	r23, r19
 6fe:	84 07       	cpc	r24, r20
 700:	ba 07       	cpc	r27, r26
 702:	20 f0       	brcs	.+8      	; 0x70c <__divsf3_pse+0xae>
 704:	62 1b       	sub	r22, r18
 706:	73 0b       	sbc	r23, r19
 708:	84 0b       	sbc	r24, r20
 70a:	ba 0b       	sbc	r27, r26
 70c:	ee 1f       	adc	r30, r30
 70e:	88 f7       	brcc	.-30     	; 0x6f2 <__divsf3_pse+0x94>
 710:	e0 95       	com	r30
 712:	08 95       	ret

00000714 <__fixsfsi>:
 714:	0e 94 91 03 	call	0x722	; 0x722 <__fixunssfsi>
 718:	68 94       	set
 71a:	b1 11       	cpse	r27, r1
 71c:	0c 94 48 04 	jmp	0x890	; 0x890 <__fp_szero>
 720:	08 95       	ret

00000722 <__fixunssfsi>:
 722:	0e 94 2d 04 	call	0x85a	; 0x85a <__fp_splitA>
 726:	88 f0       	brcs	.+34     	; 0x74a <__fixunssfsi+0x28>
 728:	9f 57       	subi	r25, 0x7F	; 127
 72a:	98 f0       	brcs	.+38     	; 0x752 <__fixunssfsi+0x30>
 72c:	b9 2f       	mov	r27, r25
 72e:	99 27       	eor	r25, r25
 730:	b7 51       	subi	r27, 0x17	; 23
 732:	b0 f0       	brcs	.+44     	; 0x760 <__fixunssfsi+0x3e>
 734:	e1 f0       	breq	.+56     	; 0x76e <__fixunssfsi+0x4c>
 736:	66 0f       	add	r22, r22
 738:	77 1f       	adc	r23, r23
 73a:	88 1f       	adc	r24, r24
 73c:	99 1f       	adc	r25, r25
 73e:	1a f0       	brmi	.+6      	; 0x746 <__fixunssfsi+0x24>
 740:	ba 95       	dec	r27
 742:	c9 f7       	brne	.-14     	; 0x736 <__fixunssfsi+0x14>
 744:	14 c0       	rjmp	.+40     	; 0x76e <__fixunssfsi+0x4c>
 746:	b1 30       	cpi	r27, 0x01	; 1
 748:	91 f0       	breq	.+36     	; 0x76e <__fixunssfsi+0x4c>
 74a:	0e 94 47 04 	call	0x88e	; 0x88e <__fp_zero>
 74e:	b1 e0       	ldi	r27, 0x01	; 1
 750:	08 95       	ret
 752:	0c 94 47 04 	jmp	0x88e	; 0x88e <__fp_zero>
 756:	67 2f       	mov	r22, r23
 758:	78 2f       	mov	r23, r24
 75a:	88 27       	eor	r24, r24
 75c:	b8 5f       	subi	r27, 0xF8	; 248
 75e:	39 f0       	breq	.+14     	; 0x76e <__fixunssfsi+0x4c>
 760:	b9 3f       	cpi	r27, 0xF9	; 249
 762:	cc f3       	brlt	.-14     	; 0x756 <__fixunssfsi+0x34>
 764:	86 95       	lsr	r24
 766:	77 95       	ror	r23
 768:	67 95       	ror	r22
 76a:	b3 95       	inc	r27
 76c:	d9 f7       	brne	.-10     	; 0x764 <__fixunssfsi+0x42>
 76e:	3e f4       	brtc	.+14     	; 0x77e <__fixunssfsi+0x5c>
 770:	90 95       	com	r25
 772:	80 95       	com	r24
 774:	70 95       	com	r23
 776:	61 95       	neg	r22
 778:	7f 4f       	sbci	r23, 0xFF	; 255
 77a:	8f 4f       	sbci	r24, 0xFF	; 255
 77c:	9f 4f       	sbci	r25, 0xFF	; 255
 77e:	08 95       	ret

00000780 <__floatunsisf>:
 780:	e8 94       	clt
 782:	09 c0       	rjmp	.+18     	; 0x796 <__floatsisf+0x12>

00000784 <__floatsisf>:
 784:	97 fb       	bst	r25, 7
 786:	3e f4       	brtc	.+14     	; 0x796 <__floatsisf+0x12>
 788:	90 95       	com	r25
 78a:	80 95       	com	r24
 78c:	70 95       	com	r23
 78e:	61 95       	neg	r22
 790:	7f 4f       	sbci	r23, 0xFF	; 255
 792:	8f 4f       	sbci	r24, 0xFF	; 255
 794:	9f 4f       	sbci	r25, 0xFF	; 255
 796:	99 23       	and	r25, r25
 798:	a9 f0       	breq	.+42     	; 0x7c4 <__floatsisf+0x40>
 79a:	f9 2f       	mov	r31, r25
 79c:	96 e9       	ldi	r25, 0x96	; 150
 79e:	bb 27       	eor	r27, r27
 7a0:	93 95       	inc	r25
 7a2:	f6 95       	lsr	r31
 7a4:	87 95       	ror	r24
 7a6:	77 95       	ror	r23
 7a8:	67 95       	ror	r22
 7aa:	b7 95       	ror	r27
 7ac:	f1 11       	cpse	r31, r1
 7ae:	f8 cf       	rjmp	.-16     	; 0x7a0 <__floatsisf+0x1c>
 7b0:	fa f4       	brpl	.+62     	; 0x7f0 <__floatsisf+0x6c>
 7b2:	bb 0f       	add	r27, r27
 7b4:	11 f4       	brne	.+4      	; 0x7ba <__floatsisf+0x36>
 7b6:	60 ff       	sbrs	r22, 0
 7b8:	1b c0       	rjmp	.+54     	; 0x7f0 <__floatsisf+0x6c>
 7ba:	6f 5f       	subi	r22, 0xFF	; 255
 7bc:	7f 4f       	sbci	r23, 0xFF	; 255
 7be:	8f 4f       	sbci	r24, 0xFF	; 255
 7c0:	9f 4f       	sbci	r25, 0xFF	; 255
 7c2:	16 c0       	rjmp	.+44     	; 0x7f0 <__floatsisf+0x6c>
 7c4:	88 23       	and	r24, r24
 7c6:	11 f0       	breq	.+4      	; 0x7cc <__floatsisf+0x48>
 7c8:	96 e9       	ldi	r25, 0x96	; 150
 7ca:	11 c0       	rjmp	.+34     	; 0x7ee <__floatsisf+0x6a>
 7cc:	77 23       	and	r23, r23
 7ce:	21 f0       	breq	.+8      	; 0x7d8 <__floatsisf+0x54>
 7d0:	9e e8       	ldi	r25, 0x8E	; 142
 7d2:	87 2f       	mov	r24, r23
 7d4:	76 2f       	mov	r23, r22
 7d6:	05 c0       	rjmp	.+10     	; 0x7e2 <__floatsisf+0x5e>
 7d8:	66 23       	and	r22, r22
 7da:	71 f0       	breq	.+28     	; 0x7f8 <__floatsisf+0x74>
 7dc:	96 e8       	ldi	r25, 0x86	; 134
 7de:	86 2f       	mov	r24, r22
 7e0:	70 e0       	ldi	r23, 0x00	; 0
 7e2:	60 e0       	ldi	r22, 0x00	; 0
 7e4:	2a f0       	brmi	.+10     	; 0x7f0 <__floatsisf+0x6c>
 7e6:	9a 95       	dec	r25
 7e8:	66 0f       	add	r22, r22
 7ea:	77 1f       	adc	r23, r23
 7ec:	88 1f       	adc	r24, r24
 7ee:	da f7       	brpl	.-10     	; 0x7e6 <__floatsisf+0x62>
 7f0:	88 0f       	add	r24, r24
 7f2:	96 95       	lsr	r25
 7f4:	87 95       	ror	r24
 7f6:	97 f9       	bld	r25, 7
 7f8:	08 95       	ret

000007fa <__fp_inf>:
 7fa:	97 f9       	bld	r25, 7
 7fc:	9f 67       	ori	r25, 0x7F	; 127
 7fe:	80 e8       	ldi	r24, 0x80	; 128
 800:	70 e0       	ldi	r23, 0x00	; 0
 802:	60 e0       	ldi	r22, 0x00	; 0
 804:	08 95       	ret

00000806 <__fp_nan>:
 806:	9f ef       	ldi	r25, 0xFF	; 255
 808:	80 ec       	ldi	r24, 0xC0	; 192
 80a:	08 95       	ret

0000080c <__fp_pscA>:
 80c:	00 24       	eor	r0, r0
 80e:	0a 94       	dec	r0
 810:	16 16       	cp	r1, r22
 812:	17 06       	cpc	r1, r23
 814:	18 06       	cpc	r1, r24
 816:	09 06       	cpc	r0, r25
 818:	08 95       	ret

0000081a <__fp_pscB>:
 81a:	00 24       	eor	r0, r0
 81c:	0a 94       	dec	r0
 81e:	12 16       	cp	r1, r18
 820:	13 06       	cpc	r1, r19
 822:	14 06       	cpc	r1, r20
 824:	05 06       	cpc	r0, r21
 826:	08 95       	ret

00000828 <__fp_round>:
 828:	09 2e       	mov	r0, r25
 82a:	03 94       	inc	r0
 82c:	00 0c       	add	r0, r0
 82e:	11 f4       	brne	.+4      	; 0x834 <__fp_round+0xc>
 830:	88 23       	and	r24, r24
 832:	52 f0       	brmi	.+20     	; 0x848 <__fp_round+0x20>
 834:	bb 0f       	add	r27, r27
 836:	40 f4       	brcc	.+16     	; 0x848 <__fp_round+0x20>
 838:	bf 2b       	or	r27, r31
 83a:	11 f4       	brne	.+4      	; 0x840 <__fp_round+0x18>
 83c:	60 ff       	sbrs	r22, 0
 83e:	04 c0       	rjmp	.+8      	; 0x848 <__fp_round+0x20>
 840:	6f 5f       	subi	r22, 0xFF	; 255
 842:	7f 4f       	sbci	r23, 0xFF	; 255
 844:	8f 4f       	sbci	r24, 0xFF	; 255
 846:	9f 4f       	sbci	r25, 0xFF	; 255
 848:	08 95       	ret

0000084a <__fp_split3>:
 84a:	57 fd       	sbrc	r21, 7
 84c:	90 58       	subi	r25, 0x80	; 128
 84e:	44 0f       	add	r20, r20
 850:	55 1f       	adc	r21, r21
 852:	59 f0       	breq	.+22     	; 0x86a <__fp_splitA+0x10>
 854:	5f 3f       	cpi	r21, 0xFF	; 255
 856:	71 f0       	breq	.+28     	; 0x874 <__fp_splitA+0x1a>
 858:	47 95       	ror	r20

0000085a <__fp_splitA>:
 85a:	88 0f       	add	r24, r24
 85c:	97 fb       	bst	r25, 7
 85e:	99 1f       	adc	r25, r25
 860:	61 f0       	breq	.+24     	; 0x87a <__fp_splitA+0x20>
 862:	9f 3f       	cpi	r25, 0xFF	; 255
 864:	79 f0       	breq	.+30     	; 0x884 <__fp_splitA+0x2a>
 866:	87 95       	ror	r24
 868:	08 95       	ret
 86a:	12 16       	cp	r1, r18
 86c:	13 06       	cpc	r1, r19
 86e:	14 06       	cpc	r1, r20
 870:	55 1f       	adc	r21, r21
 872:	f2 cf       	rjmp	.-28     	; 0x858 <__fp_split3+0xe>
 874:	46 95       	lsr	r20
 876:	f1 df       	rcall	.-30     	; 0x85a <__fp_splitA>
 878:	08 c0       	rjmp	.+16     	; 0x88a <__fp_splitA+0x30>
 87a:	16 16       	cp	r1, r22
 87c:	17 06       	cpc	r1, r23
 87e:	18 06       	cpc	r1, r24
 880:	99 1f       	adc	r25, r25
 882:	f1 cf       	rjmp	.-30     	; 0x866 <__fp_splitA+0xc>
 884:	86 95       	lsr	r24
 886:	71 05       	cpc	r23, r1
 888:	61 05       	cpc	r22, r1
 88a:	08 94       	sec
 88c:	08 95       	ret

0000088e <__fp_zero>:
 88e:	e8 94       	clt

00000890 <__fp_szero>:
 890:	bb 27       	eor	r27, r27
 892:	66 27       	eor	r22, r22
 894:	77 27       	eor	r23, r23
 896:	cb 01       	movw	r24, r22
 898:	97 f9       	bld	r25, 7
 89a:	08 95       	ret

0000089c <__mulsf3>:
 89c:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__mulsf3x>
 8a0:	0c 94 14 04 	jmp	0x828	; 0x828 <__fp_round>
 8a4:	0e 94 06 04 	call	0x80c	; 0x80c <__fp_pscA>
 8a8:	38 f0       	brcs	.+14     	; 0x8b8 <__mulsf3+0x1c>
 8aa:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_pscB>
 8ae:	20 f0       	brcs	.+8      	; 0x8b8 <__mulsf3+0x1c>
 8b0:	95 23       	and	r25, r21
 8b2:	11 f0       	breq	.+4      	; 0x8b8 <__mulsf3+0x1c>
 8b4:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_inf>
 8b8:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_nan>
 8bc:	11 24       	eor	r1, r1
 8be:	0c 94 48 04 	jmp	0x890	; 0x890 <__fp_szero>

000008c2 <__mulsf3x>:
 8c2:	0e 94 25 04 	call	0x84a	; 0x84a <__fp_split3>
 8c6:	70 f3       	brcs	.-36     	; 0x8a4 <__mulsf3+0x8>

000008c8 <__mulsf3_pse>:
 8c8:	95 9f       	mul	r25, r21
 8ca:	c1 f3       	breq	.-16     	; 0x8bc <__mulsf3+0x20>
 8cc:	95 0f       	add	r25, r21
 8ce:	50 e0       	ldi	r21, 0x00	; 0
 8d0:	55 1f       	adc	r21, r21
 8d2:	62 9f       	mul	r22, r18
 8d4:	f0 01       	movw	r30, r0
 8d6:	72 9f       	mul	r23, r18
 8d8:	bb 27       	eor	r27, r27
 8da:	f0 0d       	add	r31, r0
 8dc:	b1 1d       	adc	r27, r1
 8de:	63 9f       	mul	r22, r19
 8e0:	aa 27       	eor	r26, r26
 8e2:	f0 0d       	add	r31, r0
 8e4:	b1 1d       	adc	r27, r1
 8e6:	aa 1f       	adc	r26, r26
 8e8:	64 9f       	mul	r22, r20
 8ea:	66 27       	eor	r22, r22
 8ec:	b0 0d       	add	r27, r0
 8ee:	a1 1d       	adc	r26, r1
 8f0:	66 1f       	adc	r22, r22
 8f2:	82 9f       	mul	r24, r18
 8f4:	22 27       	eor	r18, r18
 8f6:	b0 0d       	add	r27, r0
 8f8:	a1 1d       	adc	r26, r1
 8fa:	62 1f       	adc	r22, r18
 8fc:	73 9f       	mul	r23, r19
 8fe:	b0 0d       	add	r27, r0
 900:	a1 1d       	adc	r26, r1
 902:	62 1f       	adc	r22, r18
 904:	83 9f       	mul	r24, r19
 906:	a0 0d       	add	r26, r0
 908:	61 1d       	adc	r22, r1
 90a:	22 1f       	adc	r18, r18
 90c:	74 9f       	mul	r23, r20
 90e:	33 27       	eor	r19, r19
 910:	a0 0d       	add	r26, r0
 912:	61 1d       	adc	r22, r1
 914:	23 1f       	adc	r18, r19
 916:	84 9f       	mul	r24, r20
 918:	60 0d       	add	r22, r0
 91a:	21 1d       	adc	r18, r1
 91c:	82 2f       	mov	r24, r18
 91e:	76 2f       	mov	r23, r22
 920:	6a 2f       	mov	r22, r26
 922:	11 24       	eor	r1, r1
 924:	9f 57       	subi	r25, 0x7F	; 127
 926:	50 40       	sbci	r21, 0x00	; 0
 928:	9a f0       	brmi	.+38     	; 0x950 <__stack+0x51>
 92a:	f1 f0       	breq	.+60     	; 0x968 <__stack+0x69>
 92c:	88 23       	and	r24, r24
 92e:	4a f0       	brmi	.+18     	; 0x942 <__stack+0x43>
 930:	ee 0f       	add	r30, r30
 932:	ff 1f       	adc	r31, r31
 934:	bb 1f       	adc	r27, r27
 936:	66 1f       	adc	r22, r22
 938:	77 1f       	adc	r23, r23
 93a:	88 1f       	adc	r24, r24
 93c:	91 50       	subi	r25, 0x01	; 1
 93e:	50 40       	sbci	r21, 0x00	; 0
 940:	a9 f7       	brne	.-22     	; 0x92c <__stack+0x2d>
 942:	9e 3f       	cpi	r25, 0xFE	; 254
 944:	51 05       	cpc	r21, r1
 946:	80 f0       	brcs	.+32     	; 0x968 <__stack+0x69>
 948:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <__fp_inf>
 94c:	0c 94 48 04 	jmp	0x890	; 0x890 <__fp_szero>
 950:	5f 3f       	cpi	r21, 0xFF	; 255
 952:	e4 f3       	brlt	.-8      	; 0x94c <__stack+0x4d>
 954:	98 3e       	cpi	r25, 0xE8	; 232
 956:	d4 f3       	brlt	.-12     	; 0x94c <__stack+0x4d>
 958:	86 95       	lsr	r24
 95a:	77 95       	ror	r23
 95c:	67 95       	ror	r22
 95e:	b7 95       	ror	r27
 960:	f7 95       	ror	r31
 962:	e7 95       	ror	r30
 964:	9f 5f       	subi	r25, 0xFF	; 255
 966:	c1 f7       	brne	.-16     	; 0x958 <__stack+0x59>
 968:	fe 2b       	or	r31, r30
 96a:	88 0f       	add	r24, r24
 96c:	91 1d       	adc	r25, r1
 96e:	96 95       	lsr	r25
 970:	87 95       	ror	r24
 972:	97 f9       	bld	r25, 7
 974:	08 95       	ret

00000976 <__divmodhi4>:
 976:	97 fb       	bst	r25, 7
 978:	07 2e       	mov	r0, r23
 97a:	16 f4       	brtc	.+4      	; 0x980 <__divmodhi4+0xa>
 97c:	00 94       	com	r0
 97e:	07 d0       	rcall	.+14     	; 0x98e <__divmodhi4_neg1>
 980:	77 fd       	sbrc	r23, 7
 982:	09 d0       	rcall	.+18     	; 0x996 <__divmodhi4_neg2>
 984:	0e 94 d5 04 	call	0x9aa	; 0x9aa <__udivmodhi4>
 988:	07 fc       	sbrc	r0, 7
 98a:	05 d0       	rcall	.+10     	; 0x996 <__divmodhi4_neg2>
 98c:	3e f4       	brtc	.+14     	; 0x99c <__divmodhi4_exit>

0000098e <__divmodhi4_neg1>:
 98e:	90 95       	com	r25
 990:	81 95       	neg	r24
 992:	9f 4f       	sbci	r25, 0xFF	; 255
 994:	08 95       	ret

00000996 <__divmodhi4_neg2>:
 996:	70 95       	com	r23
 998:	61 95       	neg	r22
 99a:	7f 4f       	sbci	r23, 0xFF	; 255

0000099c <__divmodhi4_exit>:
 99c:	08 95       	ret

0000099e <__tablejump2__>:
 99e:	ee 0f       	add	r30, r30
 9a0:	ff 1f       	adc	r31, r31
 9a2:	05 90       	lpm	r0, Z+
 9a4:	f4 91       	lpm	r31, Z
 9a6:	e0 2d       	mov	r30, r0
 9a8:	09 94       	ijmp

000009aa <__udivmodhi4>:
 9aa:	aa 1b       	sub	r26, r26
 9ac:	bb 1b       	sub	r27, r27
 9ae:	51 e1       	ldi	r21, 0x11	; 17
 9b0:	07 c0       	rjmp	.+14     	; 0x9c0 <__udivmodhi4_ep>

000009b2 <__udivmodhi4_loop>:
 9b2:	aa 1f       	adc	r26, r26
 9b4:	bb 1f       	adc	r27, r27
 9b6:	a6 17       	cp	r26, r22
 9b8:	b7 07       	cpc	r27, r23
 9ba:	10 f0       	brcs	.+4      	; 0x9c0 <__udivmodhi4_ep>
 9bc:	a6 1b       	sub	r26, r22
 9be:	b7 0b       	sbc	r27, r23

000009c0 <__udivmodhi4_ep>:
 9c0:	88 1f       	adc	r24, r24
 9c2:	99 1f       	adc	r25, r25
 9c4:	5a 95       	dec	r21
 9c6:	a9 f7       	brne	.-22     	; 0x9b2 <__udivmodhi4_loop>
 9c8:	80 95       	com	r24
 9ca:	90 95       	com	r25
 9cc:	bc 01       	movw	r22, r24
 9ce:	cd 01       	movw	r24, r26
 9d0:	08 95       	ret

000009d2 <atoi>:
 9d2:	fc 01       	movw	r30, r24
 9d4:	88 27       	eor	r24, r24
 9d6:	99 27       	eor	r25, r25
 9d8:	e8 94       	clt
 9da:	21 91       	ld	r18, Z+
 9dc:	20 32       	cpi	r18, 0x20	; 32
 9de:	e9 f3       	breq	.-6      	; 0x9da <atoi+0x8>
 9e0:	29 30       	cpi	r18, 0x09	; 9
 9e2:	10 f0       	brcs	.+4      	; 0x9e8 <atoi+0x16>
 9e4:	2e 30       	cpi	r18, 0x0E	; 14
 9e6:	c8 f3       	brcs	.-14     	; 0x9da <atoi+0x8>
 9e8:	2b 32       	cpi	r18, 0x2B	; 43
 9ea:	41 f0       	breq	.+16     	; 0x9fc <atoi+0x2a>
 9ec:	2d 32       	cpi	r18, 0x2D	; 45
 9ee:	39 f4       	brne	.+14     	; 0x9fe <atoi+0x2c>
 9f0:	68 94       	set
 9f2:	04 c0       	rjmp	.+8      	; 0x9fc <atoi+0x2a>
 9f4:	0e 94 12 05 	call	0xa24	; 0xa24 <__mulhi_const_10>
 9f8:	82 0f       	add	r24, r18
 9fa:	91 1d       	adc	r25, r1
 9fc:	21 91       	ld	r18, Z+
 9fe:	20 53       	subi	r18, 0x30	; 48
 a00:	2a 30       	cpi	r18, 0x0A	; 10
 a02:	c0 f3       	brcs	.-16     	; 0x9f4 <atoi+0x22>
 a04:	1e f4       	brtc	.+6      	; 0xa0c <atoi+0x3a>
 a06:	90 95       	com	r25
 a08:	81 95       	neg	r24
 a0a:	9f 4f       	sbci	r25, 0xFF	; 255
 a0c:	08 95       	ret

00000a0e <strcat>:
 a0e:	fb 01       	movw	r30, r22
 a10:	dc 01       	movw	r26, r24
 a12:	0d 90       	ld	r0, X+
 a14:	00 20       	and	r0, r0
 a16:	e9 f7       	brne	.-6      	; 0xa12 <strcat+0x4>
 a18:	11 97       	sbiw	r26, 0x01	; 1
 a1a:	01 90       	ld	r0, Z+
 a1c:	0d 92       	st	X+, r0
 a1e:	00 20       	and	r0, r0
 a20:	e1 f7       	brne	.-8      	; 0xa1a <strcat+0xc>
 a22:	08 95       	ret

00000a24 <__mulhi_const_10>:
 a24:	7a e0       	ldi	r23, 0x0A	; 10
 a26:	97 9f       	mul	r25, r23
 a28:	90 2d       	mov	r25, r0
 a2a:	87 9f       	mul	r24, r23
 a2c:	80 2d       	mov	r24, r0
 a2e:	91 0d       	add	r25, r1
 a30:	11 24       	eor	r1, r1
 a32:	08 95       	ret

00000a34 <_exit>:
 a34:	f8 94       	cli

00000a36 <__stop_program>:
 a36:	ff cf       	rjmp	.-2      	; 0xa36 <__stop_program>
